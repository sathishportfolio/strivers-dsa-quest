{
    "success": true,
    "result": {
        "problem_type": "DSA",
        "problem_id": "arrays_arrays_faqs(medium)_4sum",
        "problem_slug": "4-sum",
        "problem_name": "4 Sum",
        "subject_name": "DSA (Concept Revision)",
        "subject_slug": "dsa-concept-revision",
        "cat_id": "arrays",
        "subcatid": "arrays_faqs(medium)",
        "rank": 8,
        "hasIDE": 1,
        "points": 100,
        "problem_statement": "\u003Cp\u003EGiven an integer array \u003Cstrong\u003Enums\u003C/strong\u003E and an integer \u003Cstrong\u003Etarget\u003C/strong\u003E. Return all quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\u003C/p\u003E\u003Cp\u003E·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a, b, c, d are all distinct valid indices of nums.\u003C/p\u003E\u003Cp\u003E·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nums[a] + nums[b] + nums[c] + nums[d] == target.\u003C/p\u003E\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\u003Cp\u003ENotice that the solution set must not contain duplicate quadruplets. One element can be a part of multiple quadruplets. The output and the quadruplets can be returned in any order.\u003C/p\u003E",
        "example1": "\u003Cp\u003E\u003Cstrong\u003EInput\u003C/strong\u003E: nums = [1, -2, 3, 5, 7, 9], target = 7\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EOutput\u003C/strong\u003E: [[-2, 1, 3, 5]]\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EExplanation\u003C/strong\u003E: nums[1] + nums[0] + nums[2] + nums[3] = 7\u003C/p\u003E",
        "example2": "\u003Cp\u003E\u003Cstrong\u003EInput\u003C/strong\u003E: nums = [7, -7, 1, 2, 14, 3], target = 9\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EOutput\u003C/strong\u003E: []\u003C/p\u003E\u003Cp\u003E\u003Cstrong\u003EExplanation\u003C/strong\u003E: No quadruplets are present which add upto 9\u003C/p\u003E",
        "example3": "\u003Cp\u003EInput: nums = [1, 1, 3, 4, -3], target = 5\u003C/p\u003E\u003Cp\u003E(Give answer with the output and quadruplets sorted in ascending order)\u003C/p\u003E",
        "constraints": "\u003Cul\u003E\u003Cli\u003E1 &lt;= nums.length &lt;= 200\u003C/li\u003E\u003Cli\u003E-10\u003Csup\u003E4\u003C/sup\u003E &lt;= nums[i] &lt;= 10\u003Csup\u003E4\u003C/sup\u003E\u003C/li\u003E\u003Cli\u003E-10\u003Csup\u003E4\u003C/sup\u003E &lt;= target &lt;= 10\u003Csup\u003E4\u003C/sup\u003E\u003C/li\u003E\u003C/ul\u003E",
        "topics": "{}",
        "company_tags": [
            "Etsy",
            "Deloitte",
            "Uber",
            "Unity Technologies",
            "AMD",
            "Wayfair",
            "Rockstar Games",
            "Zomato",
            "Swiggy",
            "Chewy",
            "Bain & Company",
            "Splunk",
            "GE Healthcare",
            "Western Digital",
            "Lyft",
            "Micron Technology",
            "Teladoc Health",
            "McKinsey & Company",
            "Square",
            "Riot Games",
            "Instacart",
            "JPMorgan Chase",
            "Pinterest",
            "Target",
            "Twilio",
            "Google",
            "Microsoft",
            "Amazon",
            "Meta",
            "Apple",
            "Netflix",
            "Adobe"
        ],
        "languages_supported": "{}",
        "misc": {
            "tags": [
                "Etsy",
                "Deloitte",
                "Uber",
                "Unity Technologies",
                "AMD",
                "Wayfair",
                "Rockstar Games",
                "Zomato",
                "Swiggy",
                "Chewy",
                "Bain & Company",
                "Splunk",
                "GE Healthcare",
                "Western Digital",
                "Lyft",
                "Micron Technology",
                "Teladoc Health",
                "McKinsey & Company",
                "Square",
                "Riot Games",
                "Instacart",
                "JPMorgan Chase",
                "Pinterest",
                "Target",
                "Twilio",
                "Google",
                "Microsoft",
                "Amazon",
                "Meta",
                "Apple",
                "Netflix",
                "Adobe"
            ],
            "facts": "Finding all unique quadruplets in an integer array that add up to a target sum may seem like a pure mathematical concept, but it has practical applications in a field known as data analysis. Often, in the data analysis and machine learning field, we are given a large dataset and need to find specific patterns or combinations within the data that lead to or explain a certain outcome. These combinations are not always limited to pairs (as in the two-sum problem), but can also be triples, quadruples or more, depending on the data and problem at hand. The underlying concept is used in predictive analytics, data mining and association rule learning. For instance, in retail sales, it's common to look for combinations of products that are commonly bought together, think of the \"customers who bought this item also bought another item\" recommendations. In our case, we could be looking for combinations of four items, whose total price adds up to a certain target amount.",
            "hints": [
                {
                    "hint": "Begin by sorting the input array to simplify the identification of quadruplets and management of duplicates. Sorting ensures that duplicates are adjacent and facilitates the use of pointers for efficient searching."
                },
                {
                    "hint": "Iterate through the array, fixing two elements at a time. For each pair, use the two-pointer technique on the remaining array to find pairs of numbers that sum to the complement of the fixed pair. After fixing two elements, use two pointers to traverse the remaining array, adjusting pointers based on the sum."
                }
            ],
            "language": [],
            "difficulty": "Medium",
            "frequently_occuring_doubts": [
                {
                    "answer": "Fix two elements, nums[i] and nums[j].\nUse two pointers, left and right, on the remaining part of the array to find pairs that sum to target−nums[i]−nums[j].\nAdjust pointers:If the sum is less than the target, move left forward to increase the sum.\nIf the sum is greater, move right backward to decrease the sum.",
                    "question": "How does the two-pointer technique work in this context?"
                },
                {
                    "answer": "Skip duplicate values for nums[i], nums[j], nums[left], and nums[right] during the iterations.",
                    "question": "How do we avoid duplicate quadruplets?"
                }
            ],
            "interview_followup_questions": [
                {
                    "answer": "Sorting is part of the solution and is necessary for efficient implementation. Sorting adds O(nlogn) complexity, which is manageable compared to O(n^3).",
                    "question": " What if the input array is unsorted?"
                }
            ]
        },
        "new_editorial": [
            {
                "name": "Brute",
                "asset_id": "9h5MX4R3ym8",
                "editorial": "\n\u003Ch3\u003E\u003Cstrong\u003EIntuition\u003C/strong\u003E\u003C/h3\u003E\n\u003Cp\u003EThe idea is to check all possible quadruplets and among them, consider the ones whose sum is equal to the given target. And before considering them as our answer, sort the quadruplets in ascending order.\u003C/p\u003E\n\u003Ch3\u003E\u003Cstrong\u003EApproach&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cli\u003EFor getting quadruplets, 4 nested loops will be used. \n\u003Cli\u003EThe first loop(say i) will run from 0 to n-1. Inside which, there will be the second loop(say j) that will run from i+1 to n-1. The third loop(say k) that runs from j+1 to n-1. Inside loop k, the fourth loop(say l) will run from k+1 to n-1, yielding 4 elements from array for considering a quadruplet. \n\u003Cli\u003ENow, inside these four nested loops, check the sum of arr[i], arr[j], arr[k] and arr[l], and if it is equal to the target, sort this quadruplet and insert it in the set data structure declared to store ans. Finally, return a list of stored quadruplets.\u003C/li\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\"code-section secondary-details\"\u003E\u003Cdiv class=\"code-tabs\"\u003E\u003Cdiv\u003E\u003Cbutton class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\"\u003ECpp\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"java\"\u003EJava\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"python\"\u003EPython\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"javascript\"\u003EJavascript\u003C/button\u003E\u003C/div\u003E\u003Cdiv class=\"copy-btn\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003E\n    \u003Crect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" /\u003E\n    \u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" /\u003E\n    \u003C/svg\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"code-content\"\u003E\u003Cdiv class=\"code-block dsa_article_code_active\" data-lang=\"cpp\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"cpp\" class=\"language-cpp\"\u003E#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    //function to find quadruplets having sum equal to target\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        // Size of the array\n        int n = nums.size(); \n        \n        // Set to store unique quadruplets\n        set&lt;vector&lt;int&gt;&gt; st;\n        \n        // Checking all possible quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                for (int k = j + 1; k &lt; n; k++) {\n                    for (int l = k + 1; l &lt; n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        long long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum == target) {\n                            vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], nums[l]};\n                            // Sort the quadruplet to ensure uniqueness\n                            sort(temp.begin(), temp.end());\n                            st.insert(temp);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set to vector (unique quadruplets)\n        vector&lt;vector&lt;int&gt;&gt; ans(st.begin(), st.end());\n        return ans;\n    }\n};\n\nint main() {\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    \n    // Create an instance of Solution class\n    Solution sol;\n\n    vector&lt;vector&lt;int&gt;&gt; ans = sol.fourSum(nums, target);\n    \n    // Print the result\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto&amp; it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto&amp; ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    \n    return 0;\n}\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"java\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"java\" class=\"language-java\"\u003Eimport java.util.*;\n\nclass Solution {\n    //function to find quadruplets having sum equal to target\n    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        //size of the array\n        int n = nums.length;\n        \n        // Set to store unique quadruplets\n        Set&lt;List&lt;Integer&gt;&gt; set = new HashSet&lt;&gt;();\n        \n        // Checking all possible quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                for (int k = j + 1; k &lt; n; k++) {\n                    for (int l = k + 1; l &lt; n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum == target) {\n                            List&lt;Integer&gt; temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);\n                            // Sort the quadruplet to ensure uniqueness\n                            Collections.sort(temp);\n                            set.add(temp);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set to list (unique quadruplets)\n        return new ArrayList&lt;&gt;(set);\n    }\n    \n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        \n        //create an instance of the Solution class\n        Solution sol = new Solution();\n        \n        List&lt;List&lt;Integer&gt;&gt; ans = sol.fourSum(nums, target);\n        \n        // Print the result\n        System.out.println(\"The quadruplets are: \");\n        for (List&lt;Integer&gt; quad : ans) {\n            System.out.print(\"[\");\n            for (int num : quad) {\n                System.out.print(num + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.println();\n    }\n}\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"python\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"python\" class=\"language-python\"\u003Efrom typing import List\n\nclass Solution:\n    #function to find quadruplets having sum equal to target\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        #size of array\n        n = len(nums)\n        \n        #Set to store unique quadruplets\n        ans = set()\n        \n        # Checking all possible quadruplets\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    for l in range(k + 1, n):\n                        # Calculate the sum of the current quadruplet\n                        sum_val = nums[i] + nums[j] + nums[k] + nums[l]\n                        \n                        # Check if the sum matches the target\n                        if sum_val == target:\n                            temp = [nums[i], nums[j], nums[k], nums[l]]\n                            # Sort the quadruplet to ensure uniqueness\n                            temp.sort()\n                            ans.add(tuple(temp))\n        \n        return list(ans)\n\nif __name__ == \"__main__\":\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    \n    #Create an instance of Solution class\n    sol = Solution()\n    \n    ans = sol.fourSum(nums, target)\n    \n    # Print the result\n    print(\"The quadruplets are: \")\n    for quad in ans:\n        print(f\"[{', '.join(map(str, quad))}]\")\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"javascript\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"javascript\" class=\"language-javascript\"\u003Eclass Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        const n = nums.length;\n        const resultSet = new Set();\n        \n        // Checking all possible quadruplets\n        for (let i = 0; i &lt; n; i++) {\n            for (let j = i + 1; j &lt; n; j++) {\n                for (let k = j + 1; k &lt; n; k++) {\n                    for (let l = k + 1; l &lt; n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        const sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum === target) {\n                            const temp = [nums[i], nums[j], nums[k], nums[l]];\n                            // Sort the quadruplet to ensure uniqueness\n                            temp.sort((a, b) =&gt; a - b);\n                            resultSet.add(temp.join(',')); // Use join to store as unique string\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set back to array of arrays (unique quadruplets)\n        const ans = Array.from(resultSet).map(item =&gt; item.split(',').map(Number));\n        return ans;\n    }\n}\n\n// Sample usage\nconst nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];\nconst target = 9;\n\n// Create an instance of Solution class\nconst sol = new Solution();\nconst ans = sol.fourSum(nums, target);\n\n// Print the result\nconsole.log(\"The quadruplets are:\");\nans.forEach(quadruplet =&gt; {\n    console.log(`[${quadruplet.join(' ')}]`);\n});\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\n\n\u003Ch3\u003E\u003Cstrong\u003EComplexity Analysis&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cstrong\u003ETime Complexity: \u003C/strong\u003E O(N\u003Csup\u003E4\u003C/sup\u003E) for using 4 nested loops, where N is size of the array. \u003C/br\u003E\u003C/br\u003E\n\u003Cstrong\u003ESpace Complexity: \u003C/strong\u003EO(2 x no. of the quadruplets), for using a set data structure and a list to store the quads."
            },
            {
                "name": "Better",
                "asset_id": "4jxgA5TcjEq",
                "editorial": "\n\u003Ch3\u003E\u003Cstrong\u003EIntuition\u003C/strong\u003E\u003C/h3\u003E\n\u003Cp\u003EThe better approach uses simple mathematics where some calculative parameter is taken in RHS(right hand side) to compute the result.\n\u003Cbr\u003E\u003Cbr\u003E\nFor example if a + b + c + d = 0, then a + b + c = -d. Similar idea is used here.\u003C/p\u003E\n\u003Ch3\u003E\u003Cstrong\u003EApproach&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cli\u003EIterate in the array from 0 to n-1 where n is the length of the array. Inside this loop, there will be the second loop(say j) that will run from i+1 to n-1. Then using a 3rd nested loop(say k) that runs from j+1 to n-1 try to calculate the value of the fourth element i.e. target - (nums[i]+nums[j]+nums[k]).\n\u003Cli\u003EDeclare a HashSet to store the specific array elements as we intend to search the fourth element in that HashSet.\n\u003Cli\u003EIf the fourth element exists in the HashSet, sort these four values i.e. nums[i], nums[j], nums[k], and the fourth element, and insert it in the set data structure declared to store ans. \n\u003Cli\u003EAfter that, insert the k-th element i.e. nums[k] in the HashSet as we only want to insert those array elements that are in between indices j and k. Finally, return a list of stored quadruplets stored in the set data structure.\u003C/li\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\"code-section secondary-details\"\u003E\u003Cdiv class=\"code-tabs\"\u003E\u003Cdiv\u003E\u003Cbutton class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\"\u003ECpp\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"java\"\u003EJava\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"python\"\u003EPython\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"javascript\"\u003EJavascript\u003C/button\u003E\u003C/div\u003E\u003Cdiv class=\"copy-btn\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003E\n    \u003Crect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" /\u003E\n    \u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" /\u003E\n    \u003C/svg\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"code-content\"\u003E\u003Cdiv class=\"code-block dsa_article_code_active\" data-lang=\"cpp\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003Cspan\u003E63\u003C/span\u003E\u003Cspan\u003E64\u003C/span\u003E\u003Cspan\u003E65\u003C/span\u003E\u003Cspan\u003E66\u003C/span\u003E\u003Cspan\u003E67\u003C/span\u003E\u003Cspan\u003E68\u003C/span\u003E\u003Cspan\u003E69\u003C/span\u003E\u003Cspan\u003E70\u003C/span\u003E\u003Cspan\u003E71\u003C/span\u003E\u003Cspan\u003E72\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"cpp\" class=\"language-cpp\"\u003E#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        // Size of the array\n        int n = nums.size(); \n        \n        // Set to store unique quadruplets\n        set&lt;vector&lt;int&gt;&gt; st; \n\n        // Checking all possible quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                \n                // Set to store elements seen so far in the loop\n                set&lt;long long&gt; hashset; \n                for (int k = j + 1; k &lt; n; k++) {\n                    \n                    // Calculate the fourth element needed to reach target\n                    long long sum = nums[i] + nums[j];\n                    sum += nums[k];\n                    long long fourth = target - sum;\n                    \n                    /* Find if fourth element exists in\n                    hashset (complements seen so far)*/\n                    if (hashset.find(fourth) != hashset.end()) {\n                        \n                        // Found a quadruplet that sums up to target\n                        vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], static_cast&lt;int&gt;(fourth)};\n                        // Sort the quadruplet to ensure uniqueness\n                        sort(temp.begin(), temp.end()); \n                        st.insert(temp);\n                        \n                    }\n                    \n                    // Insert the kth element into hashset for future checks\n                    hashset.insert(nums[k]);\n                }\n            }\n        }\n        \n        // Convert set to vector (unique quadruplets)\n        vector&lt;vector&lt;int&gt;&gt; ans(st.begin(), st.end());\n        return ans;\n    }\n};\n\nint main() {\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    \n    // Create an instance of Solution class\n    Solution sol;\n    \n    vector&lt;vector&lt;int&gt;&gt; ans = sol.fourSum(nums, target);\n    \n    // Print the result\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto&amp; it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto&amp; ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    \n    return 0;\n}\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"java\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003Cspan\u003E63\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"java\" class=\"language-java\"\u003Eimport java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n        int n = nums.length;\n        \n        // Set to store unique quadruplets\n        Set&lt;List&lt;Integer&gt;&gt; set = new HashSet&lt;&gt;();\n        \n        // Checking all possible quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                // Set to store elements seen so far in the loop\n                Set&lt;Long&gt; hashset = new HashSet&lt;&gt;();\n                \n                for (int k = j + 1; k &lt; n; k++) {\n                    /* Calculate the fourth element\n                    needed to reach target*/\n                    long sum = (long) nums[i] + nums[j] + nums[k];\n                    long fourth = target - sum;\n                    \n                    /* Find if fourth element exists in \n                    hashset (complements seen so far)*/\n                    if (hashset.contains(fourth)) {\n                        // Found a quadruplet that sums up to target\n                        List&lt;Integer&gt; temp = Arrays.asList(nums[i], nums[j], nums[k], (int) fourth);\n                        Collections.sort(temp);\n                        set.add(temp);\n                    }\n                    \n                    // Insert the kth element into hashset for future checks\n                    hashset.add((long) nums[k]);\n                }\n            }\n        }\n        \n        // Convert set to list (unique quadruplets)\n        ans.addAll(set);\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        \n        // Create an instance of Solution class\n        Solution sol = new Solution();\n        \n        List&lt;List&lt;Integer&gt;&gt; ans = sol.fourSum(nums, target);\n        \n        // Print the result\n        System.out.println(\"The quadruplets are:\");\n        for (List&lt;Integer&gt; quad : ans) {\n            System.out.print(\"[\");\n            for (int num : quad) {\n                System.out.print(num + \" \");\n            }\n            System.out.println(\"]\");\n        }\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"python\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"python\" class=\"language-python\"\u003Efrom typing import List\n\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        ans = []\n        n = len(nums)\n        \n        # Set to store unique quadruplets\n        st = set()\n        \n        # Checking all possible quadruplets\n        for i in range(n):\n            for j in range(i + 1, n):\n                # Set to store elements seen so far in the loop\n                hashset = set()\n                \n                for k in range(j + 1, n):\n                    # Calculate the fourth element needed to reach target\n                    summ = nums[i] + nums[j] + nums[k]\n                    fourth = target - summ\n                    \n                    \"\"\" Find if fourth element exists in\n                    hashset (complements seen so far)\"\"\"\n                    if fourth in hashset:\n                        \n                        # Found a quadruplet that sums up to target\n                        temp = sorted([nums[i], nums[j], nums[k], fourth])\n                        st.add(tuple(temp))\n                    \n                    # Insert the kth element into hashset for future checks\n                    hashset.add(nums[k])\n        \n        # Convert set to list (unique quadruplets)\n        ans = [list(t) for t in st]\n        return ans\n\nif __name__ == \"__main__\":\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    \n    # Create an instance of Solution class\n    sol = Solution()\n    \n    ans = sol.fourSum(nums, target)\n    \n    # Print the result\n    print(\"The quadruplets are:\")\n    for quad in ans:\n        print(quad)\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"javascript\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"javascript\" class=\"language-javascript\"\u003Eclass Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        let ans = [];\n        let n = nums.length;\n        \n        // Set to store unique quadruplets\n        let set = new Set();\n        \n        // Checking all possible quadruplets\n        for (let i = 0; i &lt; n; i++) {\n            for (let j = i + 1; j &lt; n; j++) {\n                // Set to store elements seen so far in the loop\n                let hashset = new Set();\n                \n                for (let k = j + 1; k &lt; n; k++) {\n                    /* Calculate the fourth element\n                    needed to reach target*/\n                    let sum = nums[i] + nums[j] + nums[k];\n                    let fourth = target - sum;\n                    \n                    /* Find if fourth element exists in \n                    hashset (complements seen so far)*/\n                    if (hashset.has(fourth)) {\n                        \n                        // Found a quadruplet that sums up to target\n                        let temp = [nums[i], nums[j], nums[k], fourth].sort((a, b) =&gt; a - b);\n                        set.add(temp.join());\n                        \n                    }\n                    \n                    // Insert the kth element into hashset for future checks\n                    hashset.add(nums[k]);\n                }\n            }\n        }\n        \n        // Convert set to array (unique quadruplets)\n        set.forEach(item =&gt; {\n            ans.push(item.split(',').map(Number));\n        });\n        \n        return ans;\n    }\n}\n\n// Sample usage\nconst nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];\nconst target = 9;\n\n// Create an instance of Solution class\nconst sol = new Solution();\nconst ans = sol.fourSum(nums, target);\n\n// Print the result\nconsole.log(\"The quadruplets are:\");\nans.forEach(quadruplet =&gt; {\n    console.log(`[${quadruplet.join(' ')}]`);\n});\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\n\n\n\u003Ch3\u003E\u003Cstrong\u003EComplexity Analysis&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cstrong\u003ETime Complexity:  \u003C/strong\u003E O(N\u003Csup\u003E3\u003C/sup\u003Exlog(M)), for using 3 nested loops and inside the loops there are some operations on the set data structure which take log(M) time complexity, where N is size of the array, M is number of elements in the set.\u003C/br\u003E\u003C/br\u003E\n\u003Cstrong\u003ESpace Complexity:  \u003C/strong\u003E  O(2 x no. of the quadruplets)+O(N) for using a set data structure and a list to store the quads. This results in the first term. And the second space is taken by the set data structure we are using to store the array elements. At most, the set can contain approximately all the array elements and so the space complexity is O(N)."
            },
            {
                "name": "Optimal",
                "asset_id": "AysjztBDCn3",
                "editorial": "\n\u003Ch3\u003E\u003Cstrong\u003EIntuition\u003C/strong\u003E\u003C/h3\u003E\nThe optimal approach is based on similar idea from \u003Ca href=\"https://takeuforward.org/plus/dsa/arrays/faqs-medium/two-sum\"\u003E\u003Cstrong\u003E2-Sum\u003C/a\u003E\u003C/strong\u003E and \u003Ca href=\"https://takeuforward.org/plus/dsa/arrays/faqs-medium/3-sum\"\u003E\u003Cstrong\u003E3-Sum\u003C/a\u003E\u003C/strong\u003E problem, which is sorting the entire array in the first step and to get the unique quads and using pointers to keep getting unique quads. \u003C/p\u003E\n\n\u003Ch3\u003E\u003Cstrong\u003EApproach&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cli\u003ESort the entire array and iterate from 0 to n-1 in the array where n is length of the array, lets call the loop variable i. In each iteration, i will be fixed for all different values of the rest of the 3 pointers. Inside the loop, first check if the current and the previous element is the same and if it is, do nothing and continue to the next value of i.\n\u003Cli\u003EAfter the first check inside the loop, introduce another fixed pointer j(runs from i+1 to n-1). Again check for duplicate elements and only perform any further operation if the elements are different.\n\u003Cli\u003ENow, there will be 2 moving pointers i.e. k(starts from j+1) and l(starts from the last index). The pointer k will move forward and the pointer l will move backward in the array until they cross each other while the value of i and j will be fixed.\n\u003Cli\u003ECheck the sum i.e. nums[i]+nums[j]+nums[k]+nums[l], if the sum is greater, then the idea is to minimize the sum, hence we need lesser elements and so decrease the value of l and if the sum is lesser than the target, we need a bigger value and so we will increase the value of k. \n\u003Cli\u003EIf the sum is equal to the target, simply insert the quad i.e. nums[i], nums[j], nums[k], and nums[l] into answer and move the pointers k and l skipping the duplicate elements(i.e. by checking the adjacent elements while moving the pointers). Finally, return the list of unique quadruplets.\n\u003Ch3\u003E\u003Cstrong\u003EDry Run\u003C/strong\u003E\u003C/h3\u003E\n\u003Cdiv class=\"image-carousel-container\"\u003E\u003Cdiv class=\"carousel-container\"\u003E\u003Cdiv class=\"carousel\"\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/1.svg-qCe1LXe5\" alt=\"Image 1\"\u003E\u003C/div\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/2.svg-dY78qr0a\" alt=\"Image 2\"\u003E\u003C/div\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/3.svg-uLJBJ1p8\" alt=\"Image 3\"\u003E\u003C/div\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/4.svg-fZ46me4o\" alt=\"Image 4\"\u003E\u003C/div\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/6.svg-hIl0Aw0X\" alt=\"Image 5\"\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"control-container\"\u003E\u003Cdiv class=\"control-container-2\"\u003E\u003Cbutton class=\"image-carousel-arrow image-carousel-left-arrow group\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-chevron-left\"\u003E\u003Cpath d=\"m15 18-6-6 6-6\" /\u003E\u003C/svg\u003E\u003C/button\u003E\u003Cspan class=\"image-number\"\u003E\u003C/span\u003E\u003Cbutton class=\"image-carousel-arrow image-carousel-right-arrow group\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-chevron-right\"\u003E\u003Cpath d=\"m9 18 6-6-6-6\" /\u003E\u003C/svg\u003E\u003C/button\u003E\u003C/div\u003E\u003Cdiv class=\"control-buttons\"\u003E\u003Cbutton class=\"image-carousel-control-button image-carousel-play-button group\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-play\"\u003E\u003Cpolygon points=\"6 3 20 12 6 21 6 3\" /\u003E\u003C/svg\u003E\u003C/button\u003E\u003Cbutton class=\"image-carousel-control-button image-carousel-pause-button group\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pause\"\u003E\u003Crect x=\"14\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" /\u003E\u003Crect x=\"6\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" /\u003E\u003C/svg\u003E\u003C/button\u003E\u003Cbutton class=\"image-carousel-control-button image-carousel-down-button group\"\u003E\u003Csvg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" class=\"lucide lucide-external-link\"\u003E\u003Cpath d=\"M15 3h6v6\"\u003E\u003C/path\u003E\u003Cpath d=\"M10 14L21 3\"\u003E\u003C/path\u003E\u003Cpath d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"\u003E\u003C/path\u003E\u003C/svg\u003E\u003C/button\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"vertical-view\" id=\"vertical-view\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/1.svg-qCe1LXe5\" alt=\"Image 1\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/2.svg-dY78qr0a\" alt=\"Image 2\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/3.svg-uLJBJ1p8\" alt=\"Image 3\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/4.svg-fZ46me4o\" alt=\"Image 4\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/6.svg-hIl0Aw0X\" alt=\"Image 5\"\u003E\u003C/div\u003E\u003C/div\u003E\n\n\n\u003Cdiv class=\"code-section secondary-details\"\u003E\u003Cdiv class=\"code-tabs\"\u003E\u003Cdiv\u003E\u003Cbutton class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\"\u003ECpp\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"java\"\u003EJava\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"python\"\u003EPython\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"javascript\"\u003EJavascript\u003C/button\u003E\u003C/div\u003E\u003Cdiv class=\"copy-btn\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003E\n    \u003Crect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" /\u003E\n    \u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" /\u003E\n    \u003C/svg\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"code-content\"\u003E\u003Cdiv class=\"code-block dsa_article_code_active\" data-lang=\"cpp\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003Cspan\u003E63\u003C/span\u003E\u003Cspan\u003E64\u003C/span\u003E\u003Cspan\u003E65\u003C/span\u003E\u003Cspan\u003E66\u003C/span\u003E\u003Cspan\u003E67\u003C/span\u003E\u003Cspan\u003E68\u003C/span\u003E\u003Cspan\u003E69\u003C/span\u003E\u003Cspan\u003E70\u003C/span\u003E\u003Cspan\u003E71\u003C/span\u003E\u003Cspan\u003E72\u003C/span\u003E\u003Cspan\u003E73\u003C/span\u003E\u003Cspan\u003E74\u003C/span\u003E\u003Cspan\u003E75\u003C/span\u003E\u003Cspan\u003E76\u003C/span\u003E\u003Cspan\u003E77\u003C/span\u003E\u003Cspan\u003E78\u003C/span\u003E\u003Cspan\u003E79\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"cpp\" class=\"language-cpp\"\u003E#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    //function to find quadruplets having sum equals to target\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        // Vector to store the quadruplets that sum up to target\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        \n        int n = nums.size();\n        \n        // Sort the input array nums\n        sort(nums.begin(), nums.end());\n        \n        // Iterate through the array to find quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            // Skip duplicates for i\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1])\n                continue;\n            \n            for (int j = i + 1; j &lt; n; j++) {\n                // Skip duplicates for j\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1])\n                    continue;\n                \n                // Two pointers approach\n                int k = j + 1;\n                int l = n - 1;\n                \n                while (k &lt; l) {\n                    long long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                    \n                    if (sum == target) {\n                        // Found a quadruplet that sums up to target\n                        vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], nums[l]};\n                        ans.push_back(temp);\n                        \n                        // Skip duplicates for k and l\n                        k++;\n                        l--;\n                        while (k &lt; l &amp;&amp; nums[k] == nums[k - 1]) k++;\n                        while (k &lt; l &amp;&amp; nums[l] == nums[l + 1]) l--;\n                    } else if (sum &lt; target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n};\n\nint main() {\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    \n    // Create an instance of Solution class\n    Solution sol;\n    \n    vector&lt;vector&lt;int&gt;&gt; ans = sol.fourSum(nums, target);\n    \n    // Print the result\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto&amp; it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto&amp; ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    \n    return 0;\n}\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"java\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003Cspan\u003E63\u003C/span\u003E\u003Cspan\u003E64\u003C/span\u003E\u003Cspan\u003E65\u003C/span\u003E\u003Cspan\u003E66\u003C/span\u003E\u003Cspan\u003E67\u003C/span\u003E\u003Cspan\u003E68\u003C/span\u003E\u003Cspan\u003E69\u003C/span\u003E\u003Cspan\u003E70\u003C/span\u003E\u003Cspan\u003E71\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"java\" class=\"language-java\"\u003Eimport java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n        int n = nums.length;\n        \n        // Sort the input array nums\n        Arrays.sort(nums);\n        \n        // Iterate through the array to find quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            // Skip duplicates for i\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1])\n                continue;\n            \n            for (int j = i + 1; j &lt; n; j++) {\n                // Skip duplicates for j\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1])\n                    continue;\n                \n                // Two pointers approach\n                int k = j + 1;\n                int l = n - 1;\n                \n                while (k &lt; l) {\n                    long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];\n                    \n                    if (sum == target) {\n                        // Found a quadruplet that sums up to target\n                        List&lt;Integer&gt; temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);\n                        ans.add(temp);\n                        \n                        // Skip duplicates for k and l\n                        k++;\n                        l--;\n                        while (k &lt; l &amp;&amp; nums[k] == nums[k - 1]) k++;\n                        while (k &lt; l &amp;&amp; nums[l] == nums[l + 1]) l--;\n                    } else if (sum &lt; target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n    \n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        \n        // Create an instance of Solution class\n        Solution sol = new Solution();\n        \n        List&lt;List&lt;Integer&gt;&gt; ans = sol.fourSum(nums, target);\n        \n        // Print the result\n        System.out.println(\"The quadruplets are: \");\n        for (List&lt;Integer&gt; quad : ans) {\n            System.out.print(\"[\");\n            for (int num : quad) {\n                System.out.print(num + \" \");\n            }\n            System.out.println(\"]\");\n        }\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"python\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"python\" class=\"language-python\"\u003Efrom typing import List\n\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        ans = []\n        n = len(nums)\n        \n        # Sort the input array nums\n        nums.sort()\n        \n        # Iterate through the array to find quadruplets\n        for i in range(n):\n            # Skip duplicates for i\n            if i &gt; 0 and nums[i] == nums[i - 1]:\n                continue\n            \n            for j in range(i + 1, n):\n                # Skip duplicates for j\n                if j &gt; i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                \n                # Two pointers approach\n                k = j + 1\n                l = n - 1\n                \n                while k &lt; l:\n                    sum_val = nums[i] + nums[j] + nums[k] + nums[l]\n                    \n                    if sum_val == target:\n                        # Found a quadruplet that sums up to target\n                        temp = [nums[i], nums[j], nums[k], nums[l]]\n                        ans.append(temp)\n                        \n                        # Skip duplicates for k and l\n                        k += 1\n                        l -= 1\n                        while k &lt; l and nums[k] == nums[k - 1]:\n                            k += 1\n                        while k &lt; l and nums[l] == nums[l + 1]:\n                            l -= 1\n                    elif sum_val &lt; target:\n                        k += 1\n                    else:\n                        l -= 1\n        \n        return ans\n\nif __name__ == \"__main__\":\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    \n    # Create an instance of Solution class\n    sol = Solution()\n\n    ans = sol.fourSum(nums, target)\n    \n    # Print the result\n    print(\"The quadruplets are: \")\n    for quad in ans:\n        print(quad)\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"javascript\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"javascript\" class=\"language-javascript\"\u003Eclass Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        let ans = [];\n        let n = nums.length;\n        \n        // Sort the input array nums\n        nums.sort((a, b) =&gt; a - b);\n        \n        // Iterate through the array to find quadruplets\n        for (let i = 0; i &lt; n; i++) {\n            // Skip duplicates for i\n            if (i &gt; 0 &amp;&amp; nums[i] === nums[i - 1])\n                continue;\n            \n            for (let j = i + 1; j &lt; n; j++) {\n                // Skip duplicates for j\n                if (j &gt; i + 1 &amp;&amp; nums[j] === nums[j - 1])\n                    continue;\n                \n                // Two pointers approach\n                let k = j + 1;\n                let l = n - 1;\n                \n                while (k &lt; l) {\n                    let sum = nums[i] + nums[j] + nums[k] + nums[l];\n                    \n                    if (sum === target) {\n                        // Found a quadruplet that sums up to target\n                        ans.push([nums[i], nums[j], nums[k], nums[l]]);\n                        \n                        // Skip duplicates for k and l\n                        k++;\n                        l--;\n                        while (k &lt; l &amp;&amp; nums[k] === nums[k - 1]) k++;\n                        while (k &lt; l &amp;&amp; nums[l] === nums[l + 1]) l--;\n                    } else if (sum &lt; target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n}\n\n// Sample usage\nconst nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];\nconst target = 9;\n\n// Create an instance of Solution class\nconst sol = new Solution();\nconst ans = sol.fourSum(nums, target);\n\n// Print the result\nconsole.log(\"The quadruplets are:\");\nans.forEach(quadruplet =&gt; {\n    console.log(`[${quadruplet.join(' ')}]`);\n});\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\n\n\u003Ch3\u003E\u003Cstrong\u003EComplexity Analysis&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cstrong\u003ETime Complexity:\u003C/strong\u003E O(N\u003Csup\u003E3\u003C/sup\u003E), as each of the pointers i and j, is running for approximately N times. And both the pointers k and l combined can run for approximately N times including the operation of skipping duplicates. So the total time complexity will be O(N\u003Csup\u003E3\u003C/sup\u003E). Here N is size of the array.  \u003C/br\u003E\u003C/br\u003E\n\u003Cstrong\u003ESpace Complexity:\u003C/strong\u003E O(no. of quadruplets), this space is only used to store the answer. No extra space is used to solve this problem. So, from that perspective, space complexity can be written as O(1)."
            }
        ],
        "inputAndOutputStructure": {
            "input_structure": [
                {
                    "type": "array",
                    "label": "nums",
                    "subtype": "integer"
                },
                {
                    "type": "integer",
                    "label": "target",
                    "subtype": "integer"
                }
            ],
            "output_structure": {
                "type": "array"
            }
        },
        "hasGamification": 1,
        "gamificationOptions": [
            "[-3, 1, 3, 4]",
            "[[-3, 1, 4, 3], [-3, 1, 3, 4]]",
            "[[-3, 4, 3, 1]]",
            "[[-3, 1, 3, 4]]"
        ],
        "gamification_ouput": "[[-3, 1, 3, 4]]",
        "testcases": [
            {
                "inputs": {
                    "nums": "[1, -2, 3, 5, 7, 9]",
                    "target": "7"
                },
                "parsedInput": "1\nTestCase-1\n6\n1 -2 3 5 7 9\n7",
                "parsedOutput": "TestCase-1\n-2 1 3 5"
            },
            {
                "inputs": {
                    "nums": "[7, -7, 1, 2, 14, 3]",
                    "target": "9"
                },
                "parsedInput": "1\nTestCase-1\n6\n7 -7 1 2 14 3\n9",
                "parsedOutput": "TestCase-1\n "
            },
            {
                "inputs": {
                    "nums": "[1, 1, 3, 4, -3]",
                    "target": "5"
                },
                "parsedInput": "1\nTestCase-1\n5\n1 1 3 4 -3\n5",
                "parsedOutput": "TestCase-1\n-3 1 3 4"
            }
        ],
        "publicCpp": "class Solution {\npublic:\n    vector\u003Cvector\u003Cint\u003E\u003E fourSum(vector\u003Cint\u003E& nums, int target) {\n        \n    }\n};",
        "publicJava": "class Solution {\n    public List\u003CList\u003CInteger\u003E\u003E fourSum(int[] nums, int target) {\n        \n    }\n}",
        "publicPy": "class Solution:\n    def fourSum(self, nums, target):\n        ",
        "publicJs": "class Solution {\n    fourSum(nums, target) {\n\n    }\n}",
        "copy_to_editor_code": [
            {
                "name": "Brute",
                "editorial": {
                    "cpp": "class Solution {\npublic:\n    //function to find quadruplets having sum equal to target\n    vector\u003Cvector\u003Cint\u003E\u003E fourSum(vector\u003Cint\u003E& nums, int target) {\n        // Size of the array\n        int n = nums.size(); \n        \n        // Set to store unique quadruplets\n        set\u003Cvector\u003Cint\u003E\u003E st;\n        \n        // Checking all possible quadruplets\n        for (int i = 0; i \u003C n; i++) {\n            for (int j = i + 1; j \u003C n; j++) {\n                for (int k = j + 1; k \u003C n; k++) {\n                    for (int l = k + 1; l \u003C n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        long long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum == target) {\n                            vector\u003Cint\u003E temp = {nums[i], nums[j], nums[k], nums[l]};\n                            // Sort the quadruplet to ensure uniqueness\n                            sort(temp.begin(), temp.end());\n                            st.insert(temp);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set to vector (unique quadruplets)\n        vector\u003Cvector\u003Cint\u003E\u003E ans(st.begin(), st.end());\n        return ans;\n    }\n};",
                    "java": "\nclass Solution {\n    //function to find quadruplets having sum equal to target\n    public List\u003CList\u003CInteger\u003E\u003E fourSum(int[] nums, int target) {\n        //size of the array\n        int n = nums.length;\n        \n        // Set to store unique quadruplets\n        Set\u003CList\u003CInteger\u003E\u003E set = new HashSet\u003C\u003E();\n        \n        // Checking all possible quadruplets\n        for (int i = 0; i \u003C n; i++) {\n            for (int j = i + 1; j \u003C n; j++) {\n                for (int k = j + 1; k \u003C n; k++) {\n                    for (int l = k + 1; l \u003C n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum == target) {\n                            List\u003CInteger\u003E temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);\n                            // Sort the quadruplet to ensure uniqueness\n                            Collections.sort(temp);\n                            set.add(temp);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set to list (unique quadruplets)\n        return new ArrayList\u003C\u003E(set);\n    }\n}\n",
                    "python": "class Solution:\n    #function to find quadruplets having sum equal to target\n    def fourSum(self, nums: List[int], target: int) -\u003E List[List[int]]:\n        #size of array\n        n = len(nums)\n        \n        #Set to store unique quadruplets\n        ans = set()\n        \n        # Checking all possible quadruplets\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    for l in range(k + 1, n):\n                        # Calculate the sum of the current quadruplet\n                        sum_val = nums[i] + nums[j] + nums[k] + nums[l]\n                        \n                        # Check if the sum matches the target\n                        if sum_val == target:\n                            temp = [nums[i], nums[j], nums[k], nums[l]]\n                            # Sort the quadruplet to ensure uniqueness\n                            temp.sort()\n                            ans.add(tuple(temp))\n        \n        return list(ans)",
                    "javascript": "class Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        const n = nums.length;\n        const resultSet = new Set();\n        \n        // Checking all possible quadruplets\n        for (let i = 0; i \u003C n; i++) {\n            for (let j = i + 1; j \u003C n; j++) {\n                for (let k = j + 1; k \u003C n; k++) {\n                    for (let l = k + 1; l \u003C n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        const sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum === target) {\n                            const temp = [nums[i], nums[j], nums[k], nums[l]];\n                            // Sort the quadruplet to ensure uniqueness\n                            temp.sort((a, b) =\u003E a - b);\n                            resultSet.add(temp.join(',')); // Use join to store as unique string\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set back to array of arrays (unique quadruplets)\n        const ans = Array.from(resultSet).map(item =\u003E item.split(',').map(Number));\n        return ans;\n    }\n}\n\nfunction sortFunction(a, b) {\n    if (a[0] === b[0]) {\n        if(a[1]===b[1]){\n            if(a[2]===b[2]){\n                return a[3]-b[3];\n            }\n          return a[2]-b[2];\n        }\n       \n          return a[1]-b[1];\n        \n    }\n    \n        return a[0]-b[0];\n    \n}"
                }
            },
            {
                "name": "Better",
                "editorial": {
                    "cpp": "class Solution {\npublic:\n    vector\u003Cvector\u003Cint\u003E\u003E fourSum(vector\u003Cint\u003E& nums, int target) {\n        // Size of the array\n        int n = nums.size(); \n        \n        // Set to store unique quadruplets\n        set\u003Cvector\u003Cint\u003E\u003E st; \n\n        // Checking all possible quadruplets\n        for (int i = 0; i \u003C n; i++) {\n            for (int j = i + 1; j \u003C n; j++) {\n                \n                // Set to store elements seen so far in the loop\n                set\u003Clong long\u003E hashset; \n                for (int k = j + 1; k \u003C n; k++) {\n                    \n                    // Calculate the fourth element needed to reach target\n                    long long sum = nums[i] + nums[j];\n                    sum += nums[k];\n                    long long fourth = target - sum;\n                    \n                    /* Find if fourth element exists in\n                    hashset (complements seen so far)*/\n                    if (hashset.find(fourth) != hashset.end()) {\n                        \n                        // Found a quadruplet that sums up to target\n                        vector\u003Cint\u003E temp = {nums[i], nums[j], nums[k], static_cast\u003Cint\u003E(fourth)};\n                        // Sort the quadruplet to ensure uniqueness\n                        sort(temp.begin(), temp.end()); \n                        st.insert(temp);\n                        \n                    }\n                    \n                    // Insert the kth element into hashset for future checks\n                    hashset.insert(nums[k]);\n                }\n            }\n        }\n        \n        // Convert set to vector (unique quadruplets)\n        vector\u003Cvector\u003Cint\u003E\u003E ans(st.begin(), st.end());\n        return ans;\n    }\n};",
                    "java": "class Solution{\npublic List\u003CList\u003CInteger\u003E\u003E fourSum(int[] nums, int target) {\n    List\u003CList\u003CInteger\u003E\u003E ans = new ArrayList\u003C\u003E();\n    int n = nums.length;\n    \n    // Set to store unique quadruplets\n    Set\u003CList\u003CInteger\u003E\u003E set = new HashSet\u003C\u003E();\n    \n    // Checking all possible quadruplets\n    for (int i = 0; i \u003C n; i++) {\n        for (int j = i + 1; j \u003C n; j++) {\n            // Set to store elements seen so far in the loop\n            Set\u003CLong\u003E hashset = new HashSet\u003C\u003E();\n            \n            for (int k = j + 1; k \u003C n; k++) {\n                /* Calculate the fourth element\n                needed to reach target*/\n                long sum = (long) nums[i] + nums[j] + nums[k];\n                long fourth = target - sum;\n                \n                /* Find if fourth element exists in \n                hashset (complements seen so far)*/\n                if (hashset.contains(fourth)) {\n                    // Found a quadruplet that sums up to target\n                    List\u003CInteger\u003E temp = Arrays.asList(nums[i], nums[j], nums[k], (int) fourth);\n                    Collections.sort(temp);\n                    set.add(temp);\n                }\n                \n                // Insert the kth element into hashset for future checks\n                hashset.add((long) nums[k]);\n            }\n        }\n    }\n    \n    // Convert set to list (unique quadruplets)\n    ans.addAll(set);\n    return ans;\n}\n}",
                    "python": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -\u003E List[List[int]]:\n        ans = []\n        n = len(nums)\n        \n        # Set to store unique quadruplets\n        st = set()\n        \n        # Checking all possible quadruplets\n        for i in range(n):\n            for j in range(i + 1, n):\n                # Set to store elements seen so far in the loop\n                hashset = set()\n                \n                for k in range(j + 1, n):\n                    # Calculate the fourth element needed to reach target\n                    summ = nums[i] + nums[j] + nums[k]\n                    fourth = target - summ\n                    \n                    \"\"\" Find if fourth element exists in\n                    hashset (complements seen so far)\"\"\"\n                    if fourth in hashset:\n                        \n                        # Found a quadruplet that sums up to target\n                        temp = sorted([nums[i], nums[j], nums[k], fourth])\n                        st.add(tuple(temp))\n                    \n                    # Insert the kth element into hashset for future checks\n                    hashset.add(nums[k])\n        \n        # Convert set to list (unique quadruplets)\n        ans = [list(t) for t in st]\n        return ans",
                    "javascript": "class Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        let ans = [];\n        let n = nums.length;\n        \n        // Set to store unique quadruplets\n        let set = new Set();\n        \n        // Checking all possible quadruplets\n        for (let i = 0; i \u003C n; i++) {\n            for (let j = i + 1; j \u003C n; j++) {\n                // Set to store elements seen so far in the loop\n                let hashset = new Set();\n                \n                for (let k = j + 1; k \u003C n; k++) {\n                    /* Calculate the fourth element\n                    needed to reach target*/\n                    let sum = nums[i] + nums[j] + nums[k];\n                    let fourth = target - sum;\n                    \n                    /* Find if fourth element exists in \n                    hashset (complements seen so far)*/\n                    if (hashset.has(fourth)) {\n                        \n                        // Found a quadruplet that sums up to target\n                        let temp = [nums[i], nums[j], nums[k], fourth].sort((a, b) =\u003E a - b);\n                        set.add(temp.join());\n                        \n                    }\n                    \n                    // Insert the kth element into hashset for future checks\n                    hashset.add(nums[k]);\n                }\n            }\n        }\n        \n        // Convert set to array (unique quadruplets)\n        set.forEach(item =\u003E {\n            ans.push(item.split(',').map(Number));\n        });\n        \n        return ans;\n    }\n}\n\nfunction sortFunction(a, b) {\n    if (a[0] === b[0]) {\n        if(a[1]===b[1]){\n            if(a[2]===b[2]){\n                return a[3]-b[3];\n            }\n          return a[2]-b[2];\n        }\n       \n          return a[1]-b[1];\n        \n    }\n    \n        return a[0]-b[0];\n    \n}"
                }
            },
            {
                "name": "Optimal",
                "editorial": {
                    "cpp": "class Solution {\npublic:\n    //function to find quadruplets having sum equals to target\n    vector\u003Cvector\u003Cint\u003E\u003E fourSum(vector\u003Cint\u003E& nums, int target) {\n        // Vector to store the quadruplets that sum up to target\n        vector\u003Cvector\u003Cint\u003E\u003E ans;\n        \n        int n = nums.size();\n        \n        // Sort the input array nums\n        sort(nums.begin(), nums.end());\n        \n        // Iterate through the array to find quadruplets\n        for (int i = 0; i \u003C n; i++) {\n            // Skip duplicates for i\n            if (i \u003E 0 && nums[i] == nums[i - 1])\n                continue;\n            \n            for (int j = i + 1; j \u003C n; j++) {\n                // Skip duplicates for j\n                if (j \u003E i + 1 && nums[j] == nums[j - 1])\n                    continue;\n                \n                // Two pointers approach\n                int k = j + 1;\n                int l = n - 1;\n                \n                while (k \u003C l) {\n                    long long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                    \n                    if (sum == target) {\n                        // Found a quadruplet that sums up to target\n                        vector\u003Cint\u003E temp = {nums[i], nums[j], nums[k], nums[l]};\n                        ans.push_back(temp);\n                        \n                        // Skip duplicates for k and l\n                        k++;\n                        l--;\n                        while (k \u003C l && nums[k] == nums[k - 1]) k++;\n                        while (k \u003C l && nums[l] == nums[l + 1]) l--;\n                    } else if (sum \u003C target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n};",
                    "java": "class Solution{\npublic List\u003CList\u003CInteger\u003E\u003E fourSum(int[] nums, int target) {\n    List\u003CList\u003CInteger\u003E\u003E ans = new ArrayList\u003C\u003E();\n    int n = nums.length;\n    \n    // Sort the input array nums\n    Arrays.sort(nums);\n    \n    // Iterate through the array to find quadruplets\n    for (int i = 0; i \u003C n; i++) {\n        // Skip duplicates for i\n        if (i \u003E 0 && nums[i] == nums[i - 1])\n            continue;\n        \n        for (int j = i + 1; j \u003C n; j++) {\n            // Skip duplicates for j\n            if (j \u003E i + 1 && nums[j] == nums[j - 1])\n                continue;\n            \n            // Two pointers approach\n            int k = j + 1;\n            int l = n - 1;\n            \n            while (k \u003C l) {\n                long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];\n                \n                if (sum == target) {\n                    // Found a quadruplet that sums up to target\n                    List\u003CInteger\u003E temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);\n                    ans.add(temp);\n                    \n                    // Skip duplicates for k and l\n                    k++;\n                    l--;\n                    while (k \u003C l && nums[k] == nums[k - 1]) k++;\n                    while (k \u003C l && nums[l] == nums[l + 1]) l--;\n                } else if (sum \u003C target) {\n                    k++;\n                } else {\n                    l--;\n                }\n            }\n        }\n    }\n    \n    return ans;\n}\n}",
                    "python": "class Solution:\n    def fourSum(self, nums: List[int], target: int) -\u003E List[List[int]]:\n        ans = []\n        n = len(nums)\n        \n        # Sort the input array nums\n        nums.sort()\n        \n        # Iterate through the array to find quadruplets\n        for i in range(n):\n            # Skip duplicates for i\n            if i \u003E 0 and nums[i] == nums[i - 1]:\n                continue\n            \n            for j in range(i + 1, n):\n                # Skip duplicates for j\n                if j \u003E i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                \n                # Two pointers approach\n                k = j + 1\n                l = n - 1\n                \n                while k \u003C l:\n                    sum_val = nums[i] + nums[j] + nums[k] + nums[l]\n                    \n                    if sum_val == target:\n                        # Found a quadruplet that sums up to target\n                        temp = [nums[i], nums[j], nums[k], nums[l]]\n                        ans.append(temp)\n                        \n                        # Skip duplicates for k and l\n                        k += 1\n                        l -= 1\n                        while k \u003C l and nums[k] == nums[k - 1]:\n                            k += 1\n                        while k \u003C l and nums[l] == nums[l + 1]:\n                            l -= 1\n                    elif sum_val \u003C target:\n                        k += 1\n                    else:\n                        l -= 1\n        \n        return ans",
                    "javascript": "class Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        let ans = [];\n        let n = nums.length;\n        \n        // Sort the input array nums\n        nums.sort((a, b) =\u003E a - b);\n        \n        // Iterate through the array to find quadruplets\n        for (let i = 0; i \u003C n; i++) {\n            // Skip duplicates for i\n            if (i \u003E 0 && nums[i] === nums[i - 1])\n                continue;\n            \n            for (let j = i + 1; j \u003C n; j++) {\n                // Skip duplicates for j\n                if (j \u003E i + 1 && nums[j] === nums[j - 1])\n                    continue;\n                \n                // Two pointers approach\n                let k = j + 1;\n                let l = n - 1;\n                \n                while (k \u003C l) {\n                    let sum = nums[i] + nums[j] + nums[k] + nums[l];\n                    \n                    if (sum === target) {\n                        // Found a quadruplet that sums up to target\n                        ans.push([nums[i], nums[j], nums[k], nums[l]]);\n                        \n                        // Skip duplicates for k and l\n                        k++;\n                        l--;\n                        while (k \u003C l && nums[k] === nums[k - 1]) k++;\n                        while (k \u003C l && nums[l] === nums[l + 1]) l--;\n                    } else if (sum \u003C target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n}"
                }
            }
        ],
        "dsa_editorial_data": [
            {
                "id": 1,
                "name": "Brute",
                "editorial": "\n\u003Ch3\u003E\u003Cstrong\u003EIntuition\u003C/strong\u003E\u003C/h3\u003E\n\u003Cp\u003EThe idea is to check all possible quadruplets and among them, consider the ones whose sum is equal to the given target. And before considering them as our answer, sort the quadruplets in ascending order.\u003C/p\u003E\n\u003Ch3\u003E\u003Cstrong\u003EApproach&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cli\u003EFor getting quadruplets, 4 nested loops will be used. \n\u003Cli\u003EThe first loop(say i) will run from 0 to n-1. Inside which, there will be the second loop(say j) that will run from i+1 to n-1. The third loop(say k) that runs from j+1 to n-1. Inside loop k, the fourth loop(say l) will run from k+1 to n-1, yielding 4 elements from array for considering a quadruplet. \n\u003Cli\u003ENow, inside these four nested loops, check the sum of arr[i], arr[j], arr[k] and arr[l], and if it is equal to the target, sort this quadruplet and insert it in the set data structure declared to store ans. Finally, return a list of stored quadruplets.\u003C/li\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\"code-section secondary-details\"\u003E\u003Cdiv class=\"code-tabs\"\u003E\u003Cdiv\u003E\u003Cbutton class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\"\u003ECpp\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"java\"\u003EJava\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"python\"\u003EPython\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"javascript\"\u003EJavascript\u003C/button\u003E\u003C/div\u003E\u003Cdiv class=\"copy-btn\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003E\n    \u003Crect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" /\u003E\n    \u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" /\u003E\n    \u003C/svg\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"code-content\"\u003E\u003Cdiv class=\"code-block dsa_article_code_active\" data-lang=\"cpp\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"cpp\" class=\"language-cpp\"\u003E#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    //function to find quadruplets having sum equal to target\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        // Size of the array\n        int n = nums.size(); \n        \n        // Set to store unique quadruplets\n        set&lt;vector&lt;int&gt;&gt; st;\n        \n        // Checking all possible quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                for (int k = j + 1; k &lt; n; k++) {\n                    for (int l = k + 1; l &lt; n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        long long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum == target) {\n                            vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], nums[l]};\n                            // Sort the quadruplet to ensure uniqueness\n                            sort(temp.begin(), temp.end());\n                            st.insert(temp);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set to vector (unique quadruplets)\n        vector&lt;vector&lt;int&gt;&gt; ans(st.begin(), st.end());\n        return ans;\n    }\n};\n\nint main() {\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    \n    // Create an instance of Solution class\n    Solution sol;\n\n    vector&lt;vector&lt;int&gt;&gt; ans = sol.fourSum(nums, target);\n    \n    // Print the result\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto&amp; it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto&amp; ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    \n    return 0;\n}\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"java\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"java\" class=\"language-java\"\u003Eimport java.util.*;\n\nclass Solution {\n    //function to find quadruplets having sum equal to target\n    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        //size of the array\n        int n = nums.length;\n        \n        // Set to store unique quadruplets\n        Set&lt;List&lt;Integer&gt;&gt; set = new HashSet&lt;&gt;();\n        \n        // Checking all possible quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                for (int k = j + 1; k &lt; n; k++) {\n                    for (int l = k + 1; l &lt; n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum == target) {\n                            List&lt;Integer&gt; temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);\n                            // Sort the quadruplet to ensure uniqueness\n                            Collections.sort(temp);\n                            set.add(temp);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set to list (unique quadruplets)\n        return new ArrayList&lt;&gt;(set);\n    }\n    \n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        \n        //create an instance of the Solution class\n        Solution sol = new Solution();\n        \n        List&lt;List&lt;Integer&gt;&gt; ans = sol.fourSum(nums, target);\n        \n        // Print the result\n        System.out.println(\"The quadruplets are: \");\n        for (List&lt;Integer&gt; quad : ans) {\n            System.out.print(\"[\");\n            for (int num : quad) {\n                System.out.print(num + \" \");\n            }\n            System.out.print(\"] \");\n        }\n        System.out.println();\n    }\n}\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"python\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"python\" class=\"language-python\"\u003Efrom typing import List\n\nclass Solution:\n    #function to find quadruplets having sum equal to target\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        #size of array\n        n = len(nums)\n        \n        #Set to store unique quadruplets\n        ans = set()\n        \n        # Checking all possible quadruplets\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    for l in range(k + 1, n):\n                        # Calculate the sum of the current quadruplet\n                        sum_val = nums[i] + nums[j] + nums[k] + nums[l]\n                        \n                        # Check if the sum matches the target\n                        if sum_val == target:\n                            temp = [nums[i], nums[j], nums[k], nums[l]]\n                            # Sort the quadruplet to ensure uniqueness\n                            temp.sort()\n                            ans.add(tuple(temp))\n        \n        return list(ans)\n\nif __name__ == \"__main__\":\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    \n    #Create an instance of Solution class\n    sol = Solution()\n    \n    ans = sol.fourSum(nums, target)\n    \n    # Print the result\n    print(\"The quadruplets are: \")\n    for quad in ans:\n        print(f\"[{', '.join(map(str, quad))}]\")\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"javascript\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"javascript\" class=\"language-javascript\"\u003Eclass Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        const n = nums.length;\n        const resultSet = new Set();\n        \n        // Checking all possible quadruplets\n        for (let i = 0; i &lt; n; i++) {\n            for (let j = i + 1; j &lt; n; j++) {\n                for (let k = j + 1; k &lt; n; k++) {\n                    for (let l = k + 1; l &lt; n; l++) {\n                        // Calculate the sum of the current quadruplet\n                        const sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        \n                        // Check if the sum matches the target\n                        if (sum === target) {\n                            const temp = [nums[i], nums[j], nums[k], nums[l]];\n                            // Sort the quadruplet to ensure uniqueness\n                            temp.sort((a, b) =&gt; a - b);\n                            resultSet.add(temp.join(',')); // Use join to store as unique string\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Convert set back to array of arrays (unique quadruplets)\n        const ans = Array.from(resultSet).map(item =&gt; item.split(',').map(Number));\n        return ans;\n    }\n}\n\n// Sample usage\nconst nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];\nconst target = 9;\n\n// Create an instance of Solution class\nconst sol = new Solution();\nconst ans = sol.fourSum(nums, target);\n\n// Print the result\nconsole.log(\"The quadruplets are:\");\nans.forEach(quadruplet =&gt; {\n    console.log(`[${quadruplet.join(' ')}]`);\n});\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\n\n\u003Ch3\u003E\u003Cstrong\u003EComplexity Analysis&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cstrong\u003ETime Complexity: \u003C/strong\u003E O(N\u003Csup\u003E4\u003C/sup\u003E) for using 4 nested loops, where N is size of the array. \u003C/br\u003E\u003C/br\u003E\n\u003Cstrong\u003ESpace Complexity: \u003C/strong\u003EO(2 x no. of the quadruplets), for using a set data structure and a list to store the quads.",
                "placeholder": "https://app.tpstreams.com/embed/atsjxr/9h5MX4R3ym8/?access_token=33e345b1-9f22-4382-8c5c-7e49a75d8027&playRates=0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5,2.75,3,3.25,3.5,3.75,4"
            },
            {
                "id": 2,
                "name": "Better",
                "editorial": "\n\u003Ch3\u003E\u003Cstrong\u003EIntuition\u003C/strong\u003E\u003C/h3\u003E\n\u003Cp\u003EThe better approach uses simple mathematics where some calculative parameter is taken in RHS(right hand side) to compute the result.\n\u003Cbr\u003E\u003Cbr\u003E\nFor example if a + b + c + d = 0, then a + b + c = -d. Similar idea is used here.\u003C/p\u003E\n\u003Ch3\u003E\u003Cstrong\u003EApproach&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cli\u003EIterate in the array from 0 to n-1 where n is the length of the array. Inside this loop, there will be the second loop(say j) that will run from i+1 to n-1. Then using a 3rd nested loop(say k) that runs from j+1 to n-1 try to calculate the value of the fourth element i.e. target - (nums[i]+nums[j]+nums[k]).\n\u003Cli\u003EDeclare a HashSet to store the specific array elements as we intend to search the fourth element in that HashSet.\n\u003Cli\u003EIf the fourth element exists in the HashSet, sort these four values i.e. nums[i], nums[j], nums[k], and the fourth element, and insert it in the set data structure declared to store ans. \n\u003Cli\u003EAfter that, insert the k-th element i.e. nums[k] in the HashSet as we only want to insert those array elements that are in between indices j and k. Finally, return a list of stored quadruplets stored in the set data structure.\u003C/li\u003E\u003Cbr\u003E\n\n\u003Cdiv class=\"code-section secondary-details\"\u003E\u003Cdiv class=\"code-tabs\"\u003E\u003Cdiv\u003E\u003Cbutton class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\"\u003ECpp\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"java\"\u003EJava\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"python\"\u003EPython\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"javascript\"\u003EJavascript\u003C/button\u003E\u003C/div\u003E\u003Cdiv class=\"copy-btn\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003E\n    \u003Crect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" /\u003E\n    \u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" /\u003E\n    \u003C/svg\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"code-content\"\u003E\u003Cdiv class=\"code-block dsa_article_code_active\" data-lang=\"cpp\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003Cspan\u003E63\u003C/span\u003E\u003Cspan\u003E64\u003C/span\u003E\u003Cspan\u003E65\u003C/span\u003E\u003Cspan\u003E66\u003C/span\u003E\u003Cspan\u003E67\u003C/span\u003E\u003Cspan\u003E68\u003C/span\u003E\u003Cspan\u003E69\u003C/span\u003E\u003Cspan\u003E70\u003C/span\u003E\u003Cspan\u003E71\u003C/span\u003E\u003Cspan\u003E72\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"cpp\" class=\"language-cpp\"\u003E#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        // Size of the array\n        int n = nums.size(); \n        \n        // Set to store unique quadruplets\n        set&lt;vector&lt;int&gt;&gt; st; \n\n        // Checking all possible quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                \n                // Set to store elements seen so far in the loop\n                set&lt;long long&gt; hashset; \n                for (int k = j + 1; k &lt; n; k++) {\n                    \n                    // Calculate the fourth element needed to reach target\n                    long long sum = nums[i] + nums[j];\n                    sum += nums[k];\n                    long long fourth = target - sum;\n                    \n                    /* Find if fourth element exists in\n                    hashset (complements seen so far)*/\n                    if (hashset.find(fourth) != hashset.end()) {\n                        \n                        // Found a quadruplet that sums up to target\n                        vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], static_cast&lt;int&gt;(fourth)};\n                        // Sort the quadruplet to ensure uniqueness\n                        sort(temp.begin(), temp.end()); \n                        st.insert(temp);\n                        \n                    }\n                    \n                    // Insert the kth element into hashset for future checks\n                    hashset.insert(nums[k]);\n                }\n            }\n        }\n        \n        // Convert set to vector (unique quadruplets)\n        vector&lt;vector&lt;int&gt;&gt; ans(st.begin(), st.end());\n        return ans;\n    }\n};\n\nint main() {\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    \n    // Create an instance of Solution class\n    Solution sol;\n    \n    vector&lt;vector&lt;int&gt;&gt; ans = sol.fourSum(nums, target);\n    \n    // Print the result\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto&amp; it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto&amp; ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    \n    return 0;\n}\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"java\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003Cspan\u003E63\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"java\" class=\"language-java\"\u003Eimport java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n        int n = nums.length;\n        \n        // Set to store unique quadruplets\n        Set&lt;List&lt;Integer&gt;&gt; set = new HashSet&lt;&gt;();\n        \n        // Checking all possible quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                // Set to store elements seen so far in the loop\n                Set&lt;Long&gt; hashset = new HashSet&lt;&gt;();\n                \n                for (int k = j + 1; k &lt; n; k++) {\n                    /* Calculate the fourth element\n                    needed to reach target*/\n                    long sum = (long) nums[i] + nums[j] + nums[k];\n                    long fourth = target - sum;\n                    \n                    /* Find if fourth element exists in \n                    hashset (complements seen so far)*/\n                    if (hashset.contains(fourth)) {\n                        // Found a quadruplet that sums up to target\n                        List&lt;Integer&gt; temp = Arrays.asList(nums[i], nums[j], nums[k], (int) fourth);\n                        Collections.sort(temp);\n                        set.add(temp);\n                    }\n                    \n                    // Insert the kth element into hashset for future checks\n                    hashset.add((long) nums[k]);\n                }\n            }\n        }\n        \n        // Convert set to list (unique quadruplets)\n        ans.addAll(set);\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        \n        // Create an instance of Solution class\n        Solution sol = new Solution();\n        \n        List&lt;List&lt;Integer&gt;&gt; ans = sol.fourSum(nums, target);\n        \n        // Print the result\n        System.out.println(\"The quadruplets are:\");\n        for (List&lt;Integer&gt; quad : ans) {\n            System.out.print(\"[\");\n            for (int num : quad) {\n                System.out.print(num + \" \");\n            }\n            System.out.println(\"]\");\n        }\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"python\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"python\" class=\"language-python\"\u003Efrom typing import List\n\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        ans = []\n        n = len(nums)\n        \n        # Set to store unique quadruplets\n        st = set()\n        \n        # Checking all possible quadruplets\n        for i in range(n):\n            for j in range(i + 1, n):\n                # Set to store elements seen so far in the loop\n                hashset = set()\n                \n                for k in range(j + 1, n):\n                    # Calculate the fourth element needed to reach target\n                    summ = nums[i] + nums[j] + nums[k]\n                    fourth = target - summ\n                    \n                    \"\"\" Find if fourth element exists in\n                    hashset (complements seen so far)\"\"\"\n                    if fourth in hashset:\n                        \n                        # Found a quadruplet that sums up to target\n                        temp = sorted([nums[i], nums[j], nums[k], fourth])\n                        st.add(tuple(temp))\n                    \n                    # Insert the kth element into hashset for future checks\n                    hashset.add(nums[k])\n        \n        # Convert set to list (unique quadruplets)\n        ans = [list(t) for t in st]\n        return ans\n\nif __name__ == \"__main__\":\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    \n    # Create an instance of Solution class\n    sol = Solution()\n    \n    ans = sol.fourSum(nums, target)\n    \n    # Print the result\n    print(\"The quadruplets are:\")\n    for quad in ans:\n        print(quad)\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"javascript\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"javascript\" class=\"language-javascript\"\u003Eclass Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        let ans = [];\n        let n = nums.length;\n        \n        // Set to store unique quadruplets\n        let set = new Set();\n        \n        // Checking all possible quadruplets\n        for (let i = 0; i &lt; n; i++) {\n            for (let j = i + 1; j &lt; n; j++) {\n                // Set to store elements seen so far in the loop\n                let hashset = new Set();\n                \n                for (let k = j + 1; k &lt; n; k++) {\n                    /* Calculate the fourth element\n                    needed to reach target*/\n                    let sum = nums[i] + nums[j] + nums[k];\n                    let fourth = target - sum;\n                    \n                    /* Find if fourth element exists in \n                    hashset (complements seen so far)*/\n                    if (hashset.has(fourth)) {\n                        \n                        // Found a quadruplet that sums up to target\n                        let temp = [nums[i], nums[j], nums[k], fourth].sort((a, b) =&gt; a - b);\n                        set.add(temp.join());\n                        \n                    }\n                    \n                    // Insert the kth element into hashset for future checks\n                    hashset.add(nums[k]);\n                }\n            }\n        }\n        \n        // Convert set to array (unique quadruplets)\n        set.forEach(item =&gt; {\n            ans.push(item.split(',').map(Number));\n        });\n        \n        return ans;\n    }\n}\n\n// Sample usage\nconst nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];\nconst target = 9;\n\n// Create an instance of Solution class\nconst sol = new Solution();\nconst ans = sol.fourSum(nums, target);\n\n// Print the result\nconsole.log(\"The quadruplets are:\");\nans.forEach(quadruplet =&gt; {\n    console.log(`[${quadruplet.join(' ')}]`);\n});\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\n\n\n\u003Ch3\u003E\u003Cstrong\u003EComplexity Analysis&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cstrong\u003ETime Complexity:  \u003C/strong\u003E O(N\u003Csup\u003E3\u003C/sup\u003Exlog(M)), for using 3 nested loops and inside the loops there are some operations on the set data structure which take log(M) time complexity, where N is size of the array, M is number of elements in the set.\u003C/br\u003E\u003C/br\u003E\n\u003Cstrong\u003ESpace Complexity:  \u003C/strong\u003E  O(2 x no. of the quadruplets)+O(N) for using a set data structure and a list to store the quads. This results in the first term. And the second space is taken by the set data structure we are using to store the array elements. At most, the set can contain approximately all the array elements and so the space complexity is O(N).",
                "placeholder": "https://app.tpstreams.com/embed/atsjxr/4jxgA5TcjEq/?access_token=33e345b1-9f22-4382-8c5c-7e49a75d8027&playRates=0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5,2.75,3,3.25,3.5,3.75,4"
            },
            {
                "id": 3,
                "name": "Optimal",
                "editorial": "\n\u003Ch3\u003E\u003Cstrong\u003EIntuition\u003C/strong\u003E\u003C/h3\u003E\nThe optimal approach is based on similar idea from \u003Ca href=\"https://takeuforward.org/plus/dsa/arrays/faqs-medium/two-sum\"\u003E\u003Cstrong\u003E2-Sum\u003C/a\u003E\u003C/strong\u003E and \u003Ca href=\"https://takeuforward.org/plus/dsa/arrays/faqs-medium/3-sum\"\u003E\u003Cstrong\u003E3-Sum\u003C/a\u003E\u003C/strong\u003E problem, which is sorting the entire array in the first step and to get the unique quads and using pointers to keep getting unique quads. \u003C/p\u003E\n\n\u003Ch3\u003E\u003Cstrong\u003EApproach&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cli\u003ESort the entire array and iterate from 0 to n-1 in the array where n is length of the array, lets call the loop variable i. In each iteration, i will be fixed for all different values of the rest of the 3 pointers. Inside the loop, first check if the current and the previous element is the same and if it is, do nothing and continue to the next value of i.\n\u003Cli\u003EAfter the first check inside the loop, introduce another fixed pointer j(runs from i+1 to n-1). Again check for duplicate elements and only perform any further operation if the elements are different.\n\u003Cli\u003ENow, there will be 2 moving pointers i.e. k(starts from j+1) and l(starts from the last index). The pointer k will move forward and the pointer l will move backward in the array until they cross each other while the value of i and j will be fixed.\n\u003Cli\u003ECheck the sum i.e. nums[i]+nums[j]+nums[k]+nums[l], if the sum is greater, then the idea is to minimize the sum, hence we need lesser elements and so decrease the value of l and if the sum is lesser than the target, we need a bigger value and so we will increase the value of k. \n\u003Cli\u003EIf the sum is equal to the target, simply insert the quad i.e. nums[i], nums[j], nums[k], and nums[l] into answer and move the pointers k and l skipping the duplicate elements(i.e. by checking the adjacent elements while moving the pointers). Finally, return the list of unique quadruplets.\n\u003Ch3\u003E\u003Cstrong\u003EDry Run\u003C/strong\u003E\u003C/h3\u003E\n\u003Cdiv class=\"image-carousel-container\"\u003E\u003Cdiv class=\"carousel-container\"\u003E\u003Cdiv class=\"carousel\"\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/1.svg-qCe1LXe5\" alt=\"Image 1\"\u003E\u003C/div\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/2.svg-dY78qr0a\" alt=\"Image 2\"\u003E\u003C/div\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/3.svg-uLJBJ1p8\" alt=\"Image 3\"\u003E\u003C/div\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/4.svg-fZ46me4o\" alt=\"Image 4\"\u003E\u003C/div\u003E\u003Cdiv class=\"carousel-image\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/6.svg-hIl0Aw0X\" alt=\"Image 5\"\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"control-container\"\u003E\u003Cdiv class=\"control-container-2\"\u003E\u003Cbutton class=\"image-carousel-arrow image-carousel-left-arrow group\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-chevron-left\"\u003E\u003Cpath d=\"m15 18-6-6 6-6\" /\u003E\u003C/svg\u003E\u003C/button\u003E\u003Cspan class=\"image-number\"\u003E\u003C/span\u003E\u003Cbutton class=\"image-carousel-arrow image-carousel-right-arrow group\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-chevron-right\"\u003E\u003Cpath d=\"m9 18 6-6-6-6\" /\u003E\u003C/svg\u003E\u003C/button\u003E\u003C/div\u003E\u003Cdiv class=\"control-buttons\"\u003E\u003Cbutton class=\"image-carousel-control-button image-carousel-play-button group\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-play\"\u003E\u003Cpolygon points=\"6 3 20 12 6 21 6 3\" /\u003E\u003C/svg\u003E\u003C/button\u003E\u003Cbutton class=\"image-carousel-control-button image-carousel-pause-button group\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\"  stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pause\"\u003E\u003Crect x=\"14\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" /\u003E\u003Crect x=\"6\" y=\"4\" width=\"4\" height=\"16\" rx=\"1\" /\u003E\u003C/svg\u003E\u003C/button\u003E\u003Cbutton class=\"image-carousel-control-button image-carousel-down-button group\"\u003E\u003Csvg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" class=\"lucide lucide-external-link\"\u003E\u003Cpath d=\"M15 3h6v6\"\u003E\u003C/path\u003E\u003Cpath d=\"M10 14L21 3\"\u003E\u003C/path\u003E\u003Cpath d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"\u003E\u003C/path\u003E\u003C/svg\u003E\u003C/button\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"vertical-view\" id=\"vertical-view\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/1.svg-qCe1LXe5\" alt=\"Image 1\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/2.svg-dY78qr0a\" alt=\"Image 2\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/3.svg-uLJBJ1p8\" alt=\"Image 3\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/4.svg-fZ46me4o\" alt=\"Image 4\"\u003E\u003Cimg src=\"https://static.takeuforward.org/premium/Arrays/FAQs Medium/4 Sum/6.svg-hIl0Aw0X\" alt=\"Image 5\"\u003E\u003C/div\u003E\u003C/div\u003E\n\n\n\u003Cdiv class=\"code-section secondary-details\"\u003E\u003Cdiv class=\"code-tabs\"\u003E\u003Cdiv\u003E\u003Cbutton class=\"code-tab dsa_article_code_active\" data-lang=\"cpp\"\u003ECpp\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"java\"\u003EJava\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"python\"\u003EPython\u003C/button\u003E\u003Cbutton class=\"code-tab\" data-lang=\"javascript\"\u003EJavascript\u003C/button\u003E\u003C/div\u003E\u003Cdiv class=\"copy-btn\"\u003E\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003E\n    \u003Crect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\" /\u003E\n    \u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\" /\u003E\n    \u003C/svg\u003E\u003C/div\u003E\u003C/div\u003E\u003Cdiv class=\"code-content\"\u003E\u003Cdiv class=\"code-block dsa_article_code_active\" data-lang=\"cpp\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003Cspan\u003E63\u003C/span\u003E\u003Cspan\u003E64\u003C/span\u003E\u003Cspan\u003E65\u003C/span\u003E\u003Cspan\u003E66\u003C/span\u003E\u003Cspan\u003E67\u003C/span\u003E\u003Cspan\u003E68\u003C/span\u003E\u003Cspan\u003E69\u003C/span\u003E\u003Cspan\u003E70\u003C/span\u003E\u003Cspan\u003E71\u003C/span\u003E\u003Cspan\u003E72\u003C/span\u003E\u003Cspan\u003E73\u003C/span\u003E\u003Cspan\u003E74\u003C/span\u003E\u003Cspan\u003E75\u003C/span\u003E\u003Cspan\u003E76\u003C/span\u003E\u003Cspan\u003E77\u003C/span\u003E\u003Cspan\u003E78\u003C/span\u003E\u003Cspan\u003E79\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"cpp\" class=\"language-cpp\"\u003E#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    //function to find quadruplets having sum equals to target\n    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n        // Vector to store the quadruplets that sum up to target\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        \n        int n = nums.size();\n        \n        // Sort the input array nums\n        sort(nums.begin(), nums.end());\n        \n        // Iterate through the array to find quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            // Skip duplicates for i\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1])\n                continue;\n            \n            for (int j = i + 1; j &lt; n; j++) {\n                // Skip duplicates for j\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1])\n                    continue;\n                \n                // Two pointers approach\n                int k = j + 1;\n                int l = n - 1;\n                \n                while (k &lt; l) {\n                    long long sum = nums[i] + nums[j] + nums[k] + nums[l];\n                    \n                    if (sum == target) {\n                        // Found a quadruplet that sums up to target\n                        vector&lt;int&gt; temp = {nums[i], nums[j], nums[k], nums[l]};\n                        ans.push_back(temp);\n                        \n                        // Skip duplicates for k and l\n                        k++;\n                        l--;\n                        while (k &lt; l &amp;&amp; nums[k] == nums[k - 1]) k++;\n                        while (k &lt; l &amp;&amp; nums[l] == nums[l + 1]) l--;\n                    } else if (sum &lt; target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n};\n\nint main() {\n    vector&lt;int&gt; nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n    int target = 9;\n    \n    // Create an instance of Solution class\n    Solution sol;\n    \n    vector&lt;vector&lt;int&gt;&gt; ans = sol.fourSum(nums, target);\n    \n    // Print the result\n    cout &lt;&lt; \"The quadruplets are: \\n\";\n    for (auto&amp; it : ans) {\n        cout &lt;&lt; \"[\";\n        for (auto&amp; ele : it) {\n            cout &lt;&lt; ele &lt;&lt; \" \";\n        }\n        cout &lt;&lt; \"] \";\n    }\n    cout &lt;&lt; \"\\n\";\n    \n    return 0;\n}\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"java\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003Cspan\u003E63\u003C/span\u003E\u003Cspan\u003E64\u003C/span\u003E\u003Cspan\u003E65\u003C/span\u003E\u003Cspan\u003E66\u003C/span\u003E\u003Cspan\u003E67\u003C/span\u003E\u003Cspan\u003E68\u003C/span\u003E\u003Cspan\u003E69\u003C/span\u003E\u003Cspan\u003E70\u003C/span\u003E\u003Cspan\u003E71\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"java\" class=\"language-java\"\u003Eimport java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n        int n = nums.length;\n        \n        // Sort the input array nums\n        Arrays.sort(nums);\n        \n        // Iterate through the array to find quadruplets\n        for (int i = 0; i &lt; n; i++) {\n            // Skip duplicates for i\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1])\n                continue;\n            \n            for (int j = i + 1; j &lt; n; j++) {\n                // Skip duplicates for j\n                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1])\n                    continue;\n                \n                // Two pointers approach\n                int k = j + 1;\n                int l = n - 1;\n                \n                while (k &lt; l) {\n                    long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];\n                    \n                    if (sum == target) {\n                        // Found a quadruplet that sums up to target\n                        List&lt;Integer&gt; temp = Arrays.asList(nums[i], nums[j], nums[k], nums[l]);\n                        ans.add(temp);\n                        \n                        // Skip duplicates for k and l\n                        k++;\n                        l--;\n                        while (k &lt; l &amp;&amp; nums[k] == nums[k - 1]) k++;\n                        while (k &lt; l &amp;&amp; nums[l] == nums[l + 1]) l--;\n                    } else if (sum &lt; target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n    \n    public static void main(String[] args) {\n        int[] nums = {4, 3, 3, 4, 4, 2, 1, 2, 1, 1};\n        int target = 9;\n        \n        // Create an instance of Solution class\n        Solution sol = new Solution();\n        \n        List&lt;List&lt;Integer&gt;&gt; ans = sol.fourSum(nums, target);\n        \n        // Print the result\n        System.out.println(\"The quadruplets are: \");\n        for (List&lt;Integer&gt; quad : ans) {\n            System.out.print(\"[\");\n            for (int num : quad) {\n                System.out.print(num + \" \");\n            }\n            System.out.println(\"]\");\n        }\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"python\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"python\" class=\"language-python\"\u003Efrom typing import List\n\nclass Solution:\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        ans = []\n        n = len(nums)\n        \n        # Sort the input array nums\n        nums.sort()\n        \n        # Iterate through the array to find quadruplets\n        for i in range(n):\n            # Skip duplicates for i\n            if i &gt; 0 and nums[i] == nums[i - 1]:\n                continue\n            \n            for j in range(i + 1, n):\n                # Skip duplicates for j\n                if j &gt; i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                \n                # Two pointers approach\n                k = j + 1\n                l = n - 1\n                \n                while k &lt; l:\n                    sum_val = nums[i] + nums[j] + nums[k] + nums[l]\n                    \n                    if sum_val == target:\n                        # Found a quadruplet that sums up to target\n                        temp = [nums[i], nums[j], nums[k], nums[l]]\n                        ans.append(temp)\n                        \n                        # Skip duplicates for k and l\n                        k += 1\n                        l -= 1\n                        while k &lt; l and nums[k] == nums[k - 1]:\n                            k += 1\n                        while k &lt; l and nums[l] == nums[l + 1]:\n                            l -= 1\n                    elif sum_val &lt; target:\n                        k += 1\n                    else:\n                        l -= 1\n        \n        return ans\n\nif __name__ == \"__main__\":\n    nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1]\n    target = 9\n    \n    # Create an instance of Solution class\n    sol = Solution()\n\n    ans = sol.fourSum(nums, target)\n    \n    # Print the result\n    print(\"The quadruplets are: \")\n    for quad in ans:\n        print(quad)\n\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003Cdiv class=\"code-block\" data-lang=\"javascript\"\u003E\u003Cdiv class=\"line-numbers line-num\"\u003E\u003Cspan\u003E1\u003C/span\u003E\u003Cspan\u003E2\u003C/span\u003E\u003Cspan\u003E3\u003C/span\u003E\u003Cspan\u003E4\u003C/span\u003E\u003Cspan\u003E5\u003C/span\u003E\u003Cspan\u003E6\u003C/span\u003E\u003Cspan\u003E7\u003C/span\u003E\u003Cspan\u003E8\u003C/span\u003E\u003Cspan\u003E9\u003C/span\u003E\u003Cspan\u003E10\u003C/span\u003E\u003Cspan\u003E11\u003C/span\u003E\u003Cspan\u003E12\u003C/span\u003E\u003Cspan\u003E13\u003C/span\u003E\u003Cspan\u003E14\u003C/span\u003E\u003Cspan\u003E15\u003C/span\u003E\u003Cspan\u003E16\u003C/span\u003E\u003Cspan\u003E17\u003C/span\u003E\u003Cspan\u003E18\u003C/span\u003E\u003Cspan\u003E19\u003C/span\u003E\u003Cspan\u003E20\u003C/span\u003E\u003Cspan\u003E21\u003C/span\u003E\u003Cspan\u003E22\u003C/span\u003E\u003Cspan\u003E23\u003C/span\u003E\u003Cspan\u003E24\u003C/span\u003E\u003Cspan\u003E25\u003C/span\u003E\u003Cspan\u003E26\u003C/span\u003E\u003Cspan\u003E27\u003C/span\u003E\u003Cspan\u003E28\u003C/span\u003E\u003Cspan\u003E29\u003C/span\u003E\u003Cspan\u003E30\u003C/span\u003E\u003Cspan\u003E31\u003C/span\u003E\u003Cspan\u003E32\u003C/span\u003E\u003Cspan\u003E33\u003C/span\u003E\u003Cspan\u003E34\u003C/span\u003E\u003Cspan\u003E35\u003C/span\u003E\u003Cspan\u003E36\u003C/span\u003E\u003Cspan\u003E37\u003C/span\u003E\u003Cspan\u003E38\u003C/span\u003E\u003Cspan\u003E39\u003C/span\u003E\u003Cspan\u003E40\u003C/span\u003E\u003Cspan\u003E41\u003C/span\u003E\u003Cspan\u003E42\u003C/span\u003E\u003Cspan\u003E43\u003C/span\u003E\u003Cspan\u003E44\u003C/span\u003E\u003Cspan\u003E45\u003C/span\u003E\u003Cspan\u003E46\u003C/span\u003E\u003Cspan\u003E47\u003C/span\u003E\u003Cspan\u003E48\u003C/span\u003E\u003Cspan\u003E49\u003C/span\u003E\u003Cspan\u003E50\u003C/span\u003E\u003Cspan\u003E51\u003C/span\u003E\u003Cspan\u003E52\u003C/span\u003E\u003Cspan\u003E53\u003C/span\u003E\u003Cspan\u003E54\u003C/span\u003E\u003Cspan\u003E55\u003C/span\u003E\u003Cspan\u003E56\u003C/span\u003E\u003Cspan\u003E57\u003C/span\u003E\u003Cspan\u003E58\u003C/span\u003E\u003Cspan\u003E59\u003C/span\u003E\u003Cspan\u003E60\u003C/span\u003E\u003Cspan\u003E61\u003C/span\u003E\u003Cspan\u003E62\u003C/span\u003E\u003C/div\u003E\u003Cpre class=\"wp-block-code\"\u003E\u003Ccode lang=\"javascript\" class=\"language-javascript\"\u003Eclass Solution {\n    // Function to find quadruplets with sum equal to target\n    fourSum(nums, target) {\n        let ans = [];\n        let n = nums.length;\n        \n        // Sort the input array nums\n        nums.sort((a, b) =&gt; a - b);\n        \n        // Iterate through the array to find quadruplets\n        for (let i = 0; i &lt; n; i++) {\n            // Skip duplicates for i\n            if (i &gt; 0 &amp;&amp; nums[i] === nums[i - 1])\n                continue;\n            \n            for (let j = i + 1; j &lt; n; j++) {\n                // Skip duplicates for j\n                if (j &gt; i + 1 &amp;&amp; nums[j] === nums[j - 1])\n                    continue;\n                \n                // Two pointers approach\n                let k = j + 1;\n                let l = n - 1;\n                \n                while (k &lt; l) {\n                    let sum = nums[i] + nums[j] + nums[k] + nums[l];\n                    \n                    if (sum === target) {\n                        // Found a quadruplet that sums up to target\n                        ans.push([nums[i], nums[j], nums[k], nums[l]]);\n                        \n                        // Skip duplicates for k and l\n                        k++;\n                        l--;\n                        while (k &lt; l &amp;&amp; nums[k] === nums[k - 1]) k++;\n                        while (k &lt; l &amp;&amp; nums[l] === nums[l + 1]) l--;\n                    } else if (sum &lt; target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n}\n\n// Sample usage\nconst nums = [4, 3, 3, 4, 4, 2, 1, 2, 1, 1];\nconst target = 9;\n\n// Create an instance of Solution class\nconst sol = new Solution();\nconst ans = sol.fourSum(nums, target);\n\n// Print the result\nconsole.log(\"The quadruplets are:\");\nans.forEach(quadruplet =&gt; {\n    console.log(`[${quadruplet.join(' ')}]`);\n});\u003C/code\u003E\u003C/pre\u003E\u003C/div\u003E\u003C/div\u003E\u003C/div\u003E\n\n\u003Ch3\u003E\u003Cstrong\u003EComplexity Analysis&nbsp;\u003C/strong\u003E\u003C/h3\u003E\n\u003Cstrong\u003ETime Complexity:\u003C/strong\u003E O(N\u003Csup\u003E3\u003C/sup\u003E), as each of the pointers i and j, is running for approximately N times. And both the pointers k and l combined can run for approximately N times including the operation of skipping duplicates. So the total time complexity will be O(N\u003Csup\u003E3\u003C/sup\u003E). Here N is size of the array.  \u003C/br\u003E\u003C/br\u003E\n\u003Cstrong\u003ESpace Complexity:\u003C/strong\u003E O(no. of quadruplets), this space is only used to store the answer. No extra space is used to solve this problem. So, from that perspective, space complexity can be written as O(1).",
                "placeholder": "https://app.tpstreams.com/embed/atsjxr/AysjztBDCn3/?access_token=33e345b1-9f22-4382-8c5c-7e49a75d8027&playRates=0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5,2.75,3,3.25,3.5,3.75,4"
            }
        ],
        "totalLikes": 56,
        "totalDislikes": 0
    }
}